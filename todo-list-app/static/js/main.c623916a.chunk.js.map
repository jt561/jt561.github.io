{"version":3,"sources":["components/Todo.js","components/TodoList.js","components/AddTodoForm.js","components/ProgressBar.js","App.js","reducers/todosReducer.js","reducers/allReducers.js","index.js"],"names":["Todo","todoDetails","id","name","description","startDate","endDate","completed","editMode","viewState","dispatch","useDispatch","startDateEl","useRef","endDateEl","todaysDate","Date","toISOString","split","startMinDate","endMinDate","idSectionLength","length","stringExp","RegExp","idSections","match","handleModify","obj","elType","type","payload","newPropsObj","className","htmlFor","value","readOnly","onChange","e","target","BsArrow90DegDown","ref","min","max","chosenMaxDate","BsArrowReturnRight","onClick","title","CgRadioCheck","FiCheckCircle","GrEdit","AiOutlineSave","TodoList","todosArr","component","componentClassName","todosHTMLItems","map","todoObj","transitionName","transitionEnter","transitionLeave","transitionEnterTimeout","transitionLeaveTimeout","transitionAppear","transitionAppearTimeout","AddTodoForm","descriptionInputId","useState","nameInput","setNameInput","descriptionInput","setDescriptionInput","startDateInput","setStartDateInput","endDateInput","setEndDateInput","onSubmit","preventDefault","defaultDescriptionInput","defaultStartDateInput","substring","defaultEndDateInput","newTodo","uuidv4","required","current","GrAddCircle","ProgressBar","details","width","fill","outerClassName","innerClassName","height","style","display","backgroundColor","position","top","left","transition","LOCAL_STORAGE_KEY_CURRENT_TODOS","LOCAL_STORAGE_KEY_ARCHIVED_TODOS","App","useSelector","todos","currentTodos","archivedTodos","archived","toggleClassOnElement","element","classList","contains","remove","add","useEffect","storedCurrentTodos","JSON","parse","localStorage","getItem","storedArchivedTodos","setItem","stringify","filter","t","document","getElementsByClassName","RiMenuAddFill","BiRefresh","BsToggles","BiArchive","AiOutlineCloseCircle","MdDeleteForever","handleSetCurrent","state","action","handleSetArhived","handleToggleTodo","newState","todo","find","handleRefreshTodos","sort","a","b","localeCompare","handleToggleEditTodo","handleAddTodo","handleModifyTodo","newTodos","todoToModify","todoToModifyIdx","findIndex","modifiedTodo","splice","handleArchiveCompleted","newArchirvedTodos","handleToggleAllCompleted","handleDeleteArhcivedTodos","allReducers","combineReducers","store","createStore","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.c623916a.chunk.js","sourcesContent":["import { useRef } from 'react';\r\nimport { BsArrow90DegDown } from \"@react-icons/all-files/bs/BsArrow90DegDown\";\r\nimport { BsArrowReturnRight } from \"@react-icons/all-files/bs/BsArrowReturnRight\";\r\nimport { FiCheckCircle } from \"@react-icons/all-files/fi/FiCheckCircle\";\r\nimport { CgRadioCheck } from \"@react-icons/all-files/cg/CgRadioCheck\";\r\nimport { GrEdit } from \"@react-icons/all-files/gr/GrEdit\";\r\nimport { AiOutlineSave } from \"@react-icons/all-files/ai/AiOutlineSave\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nfunction Todo({ todoDetails: { id, name, description, startDate, endDate, completed, editMode, viewState } }) {\r\n    const dispatch = useDispatch();\r\n\r\n    const startDateEl = useRef(\"\");\r\n    const endDateEl = useRef(\"\");\r\n\r\n    const todaysDate = new Date().toISOString().split(\"T\")[0];\r\n    const chosenMaxDate = \"2030-01-01\";\r\n    const startMinDate = todaysDate;\r\n    const startMaxDate = chosenMaxDate;\r\n    const endMinDate = todaysDate;\r\n    const endMaxDate = chosenMaxDate;\r\n\r\n    // splits the id string into 4 sections\r\n    const idSectionLength = id.length / 4; // give length of each string when split into 4 sections\r\n    const stringExp = new RegExp(`.{1,${idSectionLength}}`,\"g\");\r\n    const idSections = id.match(stringExp); // array of size 4\r\n\r\n    const handleCheckboxClick = () => {\r\n        if (!viewState) return; // dont toggle if it is in \"frozen\" mode\r\n        dispatch({type:'TOGGLE_TODO', payload: {id}});\r\n    }\r\n\r\n    const handleEditClick = () => {\r\n        if (!viewState) return;\r\n        dispatch({type:'TOGGLE_EDIT_TODO', payload: {id}});\r\n    }\r\n\r\n    const handleModify = (obj, elType = \"\") => {\r\n        switch (elType) {\r\n            // ensures start date and end date dont overlap in the wrong direction\r\n            case \"startDateEl\":\r\n                if (obj.startDate > endDate) obj = { ...obj, endDate: obj.startDate };\r\n                break;\r\n            case \"endDateEl\":\r\n                if (obj.endDate < startDate) obj = { ...obj, startDate: obj.endDate };\r\n                break;\r\n            default: break;\r\n        }\r\n        dispatch({type:'MODIFY_TODO', payload: {id, newPropsObj:obj}});;\r\n    }\r\n\r\n    return (\r\n        <div className={`todo ${editMode ? 'input' : ''} ${viewState ? 'view' : 'not-view'} ${completed ? 'completed' : 'uncompleted'}`} >\r\n            <div className=\"todo-content\">\r\n                <div>\r\n                    <label htmlFor={id+idSections[0]} className=\"no-display-form-label\" >Task name</label>\r\n                    <input id={id+idSections[0]} type=\"text\" value={name} readOnly={!editMode} onChange={(e) => { handleModify({ name: e.target.value }) }} />\r\n                </div>\r\n                <div>\r\n                    <label htmlFor={id+idSections[1]} className=\"no-display-form-label\" >Description</label>\r\n                    <textarea id={id+idSections[1]} type=\"textarea\" value={description} readOnly={!editMode} onChange={(e) => { handleModify({ description: e.target.value }) }} />\r\n                </div>\r\n                <div className=\"startDateContainer\">\r\n                    <label htmlFor={id+idSections[2]} className=\"no-display-form-label\" >Start date</label>\r\n                    <BsArrow90DegDown />\r\n                    <input id={id+idSections[2]} type=\"date\" ref={startDateEl} min={startMinDate} max={startMaxDate} value={startDate} readOnly={!editMode} onChange={(e) => { handleModify({ startDate: e.target.value }, \"startDateEl\") }} />\r\n                </div>\r\n                <div className=\"endDateContainer\">\r\n                    <label htmlFor={id+idSections[3]} className=\"no-display-form-label\" >End date</label>\r\n                    <BsArrowReturnRight />\r\n                    <input id={id+idSections[3]} type=\"date\" ref={endDateEl} min={endMinDate} max={endMaxDate} value={endDate} readOnly={!editMode} onChange={(e) => { handleModify({ endDate: e.target.value }, \"endDateEl\") }} />\r\n                </div>\r\n            </div>\r\n            <div className=\"edit-todo-control\" >\r\n                <div onClick={handleCheckboxClick} className={`toggle-checked-btn ${!completed && 'active'}`} title={completed ? \"Mark as uncompleted\" : \"Mark as completed\"}>\r\n                    {!completed && <CgRadioCheck />}\r\n                    {completed && <FiCheckCircle />}\r\n                </div>\r\n                <div onClick={handleEditClick} className={`toggle-edit-btn ${editMode && 'active'}`} title={editMode ? \"Click to save\" : \"Click to edit\"}>\r\n                    {!editMode && <GrEdit />}\r\n                    {editMode && <AiOutlineSave />}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default Todo;","import Todo from './Todo';\r\nimport { CSSTransitionGroup } from \"react-transition-group\";\r\n\r\n\r\nfunction TodoList({ todosArr, component, componentClassName }) {\r\n\r\n    let todosHTMLItems = todosArr.map(todoObj => {\r\n        return <Todo key={todoObj.id} todoDetails={todoObj} />;\r\n    });\r\n\r\n    return (\r\n        <CSSTransitionGroup\r\n            component={component}\r\n            className={componentClassName}\r\n            transitionName=\"items-list\"\r\n            transitionEnter={true}\r\n            transitionLeave={true}\r\n            transitionEnterTimeout={500}\r\n            transitionLeaveTimeout={600}\r\n            transitionAppear={true}\r\n            transitionAppearTimeout={500}\r\n        >\r\n            {todosHTMLItems}\r\n            {todosHTMLItems.length < 1 && (<h3>...</h3>)}\r\n        </CSSTransitionGroup>\r\n    );\r\n\r\n}\r\n\r\nexport default TodoList;","import { useState, useRef } from \"react\";\r\nimport { GrAddCircle } from \"@react-icons/all-files/gr/GrAddCircle\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\nfunction AddTodoForm() {\r\n    const dispatch = useDispatch();\r\n\r\n    const descriptionInputId = \"formDescriptionInput1\";\r\n\r\n    const todaysDate = new Date().toISOString().split(\"T\")[0];\r\n    const chosenMaxDate = \"2030-01-01\";\r\n\r\n    const [nameInput, setNameInput] = useState(\"\");\r\n    const [descriptionInput, setDescriptionInput] = useState(\"\");\r\n    const [startDateInput, setStartDateInput] = useState(todaysDate);\r\n    const [endDateInput, setEndDateInput] = useState(todaysDate);\r\n    const completedInput = false; // todo checked as completed\r\n    const editModeInput = false; // todo checked to be edited\r\n    const viewStateInput = true; // todo that has been cleared and cant be altered\r\n\r\n    const startDateEl = useRef(\"\");\r\n    const endDateEl = useRef(\"\");\r\n\r\n    const startMinDate = todaysDate;\r\n    const startMaxDate = chosenMaxDate;\r\n    const endMinDate = todaysDate;\r\n    const endMaxDate = chosenMaxDate;\r\n\r\n    const onSubmit = (e) => {\r\n        e.preventDefault();\r\n        if (nameInput === \"\") return;\r\n\r\n        const defaultDescriptionInput =\r\n            descriptionInput === \"\" ? \"No description given\" : descriptionInput;\r\n        const defaultStartDateInput =\r\n            startDateInput === \"\"\r\n                ? new Date().toISOString().substring(0, 10)\r\n                : startDateInput;\r\n        const defaultEndDateInput =\r\n            endDateInput === \"\"\r\n                ? new Date().toISOString().substring(0, 10)\r\n                : endDateInput;\r\n        setDescriptionInput(defaultDescriptionInput);\r\n        setStartDateInput(defaultStartDateInput);\r\n        setEndDateInput(defaultEndDateInput);\r\n\r\n        const newTodo = {\r\n            id: uuidv4(),\r\n            name: nameInput,\r\n            description: defaultDescriptionInput,\r\n            startDate: defaultStartDateInput,\r\n            endDate: defaultEndDateInput,\r\n            completed: completedInput,\r\n            editMode: editModeInput,\r\n            viewState: viewStateInput,\r\n        };\r\n        dispatch({ type: \"ADD_TODO\", payload: { newTodo } });\r\n        setNameInput(\"\");\r\n        setDescriptionInput(\"\");\r\n        setStartDateInput(todaysDate);\r\n        setEndDateInput(todaysDate);\r\n    };\r\n\r\n    const handleStartDateSetter = (e) => {\r\n        // ensures start date and end date dont overlap in the wrong direction\r\n        if (e.target.value > endDateEl.current.value)\r\n            setEndDateInput(e.target.value);\r\n        setStartDateInput(e.target.value);\r\n    };\r\n\r\n    const handleEndDateSetter = (e) => {\r\n        // ensures start date and end date dont overlap in the wrong direction\r\n        if (e.target.value < startDateEl.current.value)\r\n            setStartDateInput(e.target.value);\r\n        setEndDateInput(e.target.value);\r\n    };\r\n\r\n    return (\r\n        <form onSubmit={onSubmit} className=\"add-todo-form\">\r\n            <div className=\"controls-header\">Add a new item</div>\r\n            <div className=\"controls-wrapper\">\r\n                <div className=\"todo input\">\r\n                    <div className=\"todo-content\">\r\n                        <div>\r\n                            <div>\r\n                                <label htmlFor=\"taskName1\" className=\"\">\r\n                                    Task name\r\n                                </label>\r\n                            </div>\r\n                            <input\r\n                                id=\"taskName1\"\r\n                                type=\"text\"\r\n                                // placeholder=\"my first task\"\r\n                                value={nameInput}\r\n                                onChange={(e) => {\r\n                                    setNameInput(e.target.value);\r\n                                }}\r\n                                required\r\n                            />\r\n                        </div>\r\n                        <div>\r\n                            <div>\r\n                                <label\r\n                                    htmlFor={descriptionInputId}\r\n                                    className=\"\"\r\n                                >\r\n                                    Description\r\n                                </label>\r\n                            </div>\r\n                            <textarea\r\n                                id={descriptionInputId}\r\n                                type=\"textarea\"\r\n                                // placeholder=\"No description given\"\r\n                                value={descriptionInput}\r\n                                onChange={(e) => {\r\n                                    setDescriptionInput(e.target.value);\r\n                                }}\r\n                            />\r\n                        </div>\r\n                        <div>\r\n                            <div>\r\n                                <label htmlFor=\"start-date\">From:</label>\r\n                            </div>\r\n                            <div>\r\n                                <input\r\n                                    ref={startDateEl}\r\n                                    id=\"start-date\"\r\n                                    type=\"date\"\r\n                                    min={startMinDate}\r\n                                    max={startMaxDate}\r\n                                    value={startDateInput}\r\n                                    onChange={handleStartDateSetter}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                        <div>\r\n                            <div>\r\n                                <label htmlFor=\"end-date\">To:</label>\r\n                            </div>\r\n                            <div>\r\n                                <input\r\n                                    ref={endDateEl}\r\n                                    id=\"end-date\"\r\n                                    type=\"date\"\r\n                                    min={endMinDate}\r\n                                    max={endMaxDate}\r\n                                    value={endDateInput}\r\n                                    onChange={handleEndDateSetter}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <button\r\n                type=\"submit\"\r\n                title=\"Add a new task to your list\"\r\n                className=\"btn-type-1\"\r\n            >\r\n                <GrAddCircle />\r\n                Add task\r\n            </button>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default AddTodoForm;\r\n","\r\n\r\nfunction ProgressBar({ details:{width, fill, outerClassName, innerClassName, height} }) {\r\n\r\n    return (\r\n        <div className={outerClassName} style={{width:width, height:height, display:\"inline-block\", backgroundColor:\"red\", position:\"relative\"}}>\r\n            <div className={innerClassName} style={{width:fill, height:\"130%\", display:\"inline-block\", backgroundColor:\"rgba(31, 164, 226)\", position:\"absolute\", top:\"-1px\", left:\"0px\", transition:\"width .2s ease-out\"}}></div>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default ProgressBar;","import { useEffect } from \"react\";\nimport \"./App.scss\";\nimport TodoList from \"./components/TodoList\";\nimport AddTodoForm from \"./components/AddTodoForm\";\nimport ProgressBar from \"./components/ProgressBar\";\nimport { BiRefresh } from \"@react-icons/all-files/bi/BiRefresh\";\nimport { BsToggles } from \"@react-icons/all-files/bs/BsToggles\";\nimport { BiArchive } from \"@react-icons/all-files/bi/BiArchive\";\nimport { MdDeleteForever } from \"@react-icons/all-files/md/MdDeleteForever\";\nimport { AiOutlineCloseCircle } from \"@react-icons/all-files/ai/AiOutlineCloseCircle\";\nimport { RiMenuAddFill } from \"@react-icons/all-files/ri/RiMenuAddFill\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nconst LOCAL_STORAGE_KEY_CURRENT_TODOS = \"myTaskListApp.todos.current\";\nconst LOCAL_STORAGE_KEY_ARCHIVED_TODOS = \"myTaskListApp.todos.archived\";\n\nfunction App() {\n    const { currentTodos, archivedTodos } = useSelector(({ todos }) => {\n        return {\n            currentTodos: todos.current,\n            archivedTodos: todos.archived,\n        };\n    });\n\n    const dispatch = useDispatch();\n\n    const handleSideContainerToggle = () => {\n        toggleClassOnElement(\n            document.getElementsByClassName(\"side-container\")[0],\n            \"show\"\n        );\n    };\n\n    const toggleClassOnElement = (element, className) => {\n        if (element.classList.contains(className)) {\n            element.classList.remove(className);\n        } else {\n            element.classList.add(className);\n        }\n    };\n\n    useEffect(() => {\n        const storedCurrentTodos = JSON.parse(\n            localStorage.getItem(LOCAL_STORAGE_KEY_CURRENT_TODOS)\n        );\n        if (storedCurrentTodos)\n            dispatch({ type: \"SET_CURRENT\", payload: storedCurrentTodos });\n        const storedArchivedTodos = JSON.parse(\n            localStorage.getItem(LOCAL_STORAGE_KEY_ARCHIVED_TODOS)\n        );\n        if (storedArchivedTodos)\n          dispatch({ type: \"SET_ARCHIVED\", payload: storedArchivedTodos });\n    }, [dispatch]);\n\n    useEffect(() => {\n        localStorage.setItem(\n            LOCAL_STORAGE_KEY_CURRENT_TODOS,\n            JSON.stringify(currentTodos)\n        );\n    }, [currentTodos]);\n\n    useEffect(() => {\n        localStorage.setItem(\n            LOCAL_STORAGE_KEY_ARCHIVED_TODOS,\n            JSON.stringify(archivedTodos)\n        );\n    }, [archivedTodos]);\n\n    return (\n        <div className=\"App\">\n            <div className=\"main-container\">\n                <div className=\"todos-container\">\n                    <div className=\"todos-header\">\n                        <div>\n                            <span>\n                                {\n                                    currentTodos.filter((t) => !t.completed)\n                                        .length\n                                }\n                                /{currentTodos.length} tasks left\n                            </span>\n                            <ProgressBar\n                                details={{\n                                    width: \"100%\",\n                                    height: \".5rem\",\n                                    fill: `${\n                                        currentTodos.length < 1\n                                            ? \"100\"\n                                            : (currentTodos.filter(\n                                                  (t) => t.completed\n                                              ).length /\n                                                  currentTodos.length) *\n                                              100\n                                    }%`,\n                                    outerClassName: \"progress-bar-outer\",\n                                    innerClassName: \"progress-bar-inner\",\n                                }}\n                            />\n                        </div>\n                        <h1 className=\"title-myTodoList\">My Task List</h1>\n                    </div>\n                    <TodoList\n                        todosArr={currentTodos}\n                        component=\"div\"\n                        componentClassName=\"current-todos\"\n                    />\n                    <div className=\"toggle-side-view-container open\">\n                        <button\n                            className=\"btn-type-1\"\n                            onClick={() => {\n                                toggleClassOnElement(\n                                    document.getElementsByClassName(\n                                        \"side-container\"\n                                    )[0],\n                                    \"show\"\n                                );\n                            }}\n                            title=\"add a new item/view archived tasks\"\n                        >\n                            <RiMenuAddFill />\n                            Menu\n                        </button>\n                    </div>\n                    <div className=\"quick-controls-container\">\n                        <button\n                            onClick={() => dispatch({ type: \"REFRESH_TODOS\" })}\n                            className=\"btn-type-1\"\n                            title=\"Put uncompleted and due tasks at the top\"\n                        >\n                            <BiRefresh />\n                            Refresh\n                        </button>\n                        <button\n                            onClick={() =>\n                                dispatch({ type: \"TOGGLE_ALL_COMPLETED\" })\n                            }\n                            className=\"btn-type-1\"\n                            title=\"Mark as as completed or uncompleted\"\n                        >\n                            <BsToggles />\n                            Toggle all as completed\n                        </button>\n                        <button\n                            onClick={() =>\n                                dispatch({ type: \"ARCHIVE_COMPLETED\" })\n                            }\n                            className=\"btn-type-1\"\n                            title=\"Put completed tasks in an archive\"\n                        >\n                            <BiArchive />\n                            Archive completed tasks\n                        </button>\n                    </div>\n                </div>\n                <div className=\"side-container\">\n                    <div className=\"toggle-side-view-container close\">\n                        <button\n                            className=\"btn-type-1\"\n                            onClick={handleSideContainerToggle}\n                        >\n                            <AiOutlineCloseCircle />\n                            Close\n                        </button>\n                    </div>\n                    <div className=\"controls-container\">\n                        <AddTodoForm />\n                    </div>\n                    <div className=\"cleared-todos-container\">\n                        <div className=\"cleared-todos-header\">\n                            <span>Archived Tasks({archivedTodos.length})</span>\n                            <button\n                                onClick={() =>\n                                    dispatch({ type: \"DELETE_ARCHIVED_TODOS\" })\n                                }\n                                className=\"btn-type-1\"\n                                title=\"Delete all tasks in archive\"\n                            >\n                                <MdDeleteForever />\n                                Delete all\n                            </button>\n                        </div>\n                        <TodoList\n                            todosArr={archivedTodos}\n                            component=\"div\"\n                            componentClassName=\"cleared-todos-wrapper\"\n                        />\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","const handleSetCurrent = (state, action) => {\r\n  return { current: action.payload, archived: state.archived };\r\n};\r\n\r\nconst handleSetArhived = (state, action) => {\r\n  return { current: state.current, archived: action.payload };\r\n};\r\n\r\nconst handleToggleTodo = (state, action) => {\r\n  let newState = { ...state };\r\n  const todo = newState.current.find((todo) => todo.id === action.payload.id);\r\n  todo.completed = !todo.completed;\r\n  return newState;\r\n};\r\n\r\nconst handleRefreshTodos = (state) => {\r\n  let newState = { ...state };\r\n  newState.current.sort((a, b) => (\"\" + a.endDate).localeCompare(b.endDate)); // sort by date\r\n  newState.current.sort((a, b) => {\r\n    if (a.completed === false && b.completed === true) {\r\n      return -1;\r\n    }\r\n    if (a.completed === true && b.completed === false) {\r\n      return 1;\r\n    }\r\n    return 0;\r\n  }); // sort by completed\r\n\r\n  return newState;\r\n};\r\n\r\nconst handleToggleEditTodo = (state, action) => {\r\n  let newState = { ...state };\r\n  const todo = newState.current.find((todo) => todo.id === action.payload.id);\r\n  todo.editMode = !todo.editMode;\r\n  return newState;\r\n};\r\n\r\nconst handleAddTodo = (state, action) => {\r\n  let newState = { ...state };\r\n  newState = {\r\n    current: [action.payload.newTodo, ...newState.current],\r\n    archived: newState.archived,\r\n  };\r\n  return newState;\r\n};\r\n\r\nconst handleModifyTodo = (state, action) => {\r\n  let newState = { ...state };\r\n  let newTodos = newState.current.filter(\r\n    (todoObj) => todoObj.id !== action.payload.id\r\n  );\r\n  let todoToModify = newState.current.find(\r\n    (todoObj) => todoObj.id === action.payload.id\r\n  );\r\n  let todoToModifyIdx = newState.current.findIndex(\r\n    (todoObj) => todoObj.id === action.payload.id\r\n  );\r\n  let modifiedTodo = {\r\n    ...todoToModify,\r\n    ...action.payload.newPropsObj,\r\n  };\r\n  newTodos.splice(todoToModifyIdx, 0, modifiedTodo);\r\n  newState.current = newTodos;\r\n  return newState;\r\n};\r\n\r\nconst handleArchiveCompleted = (state) => {\r\n  if (state.current.length < 1) return state;\r\n  let newState = { ...state };\r\n  const newArchirvedTodos = newState.current\r\n    .filter((todo) => {\r\n      return todo.completed;\r\n    })\r\n    .map((todo) => {\r\n      return { ...todo, ...{ viewState: false }, ...{ editMode: false } };\r\n    });\r\n  const newTodos = newState.current.filter((todo) => {\r\n    return !todo.completed;\r\n  });\r\n  newState.archived = [...newArchirvedTodos, ...newState.archived];\r\n  newState.current = newTodos;\r\n  return newState;\r\n};\r\n\r\nconst handleToggleAllCompleted = (state) => {\r\n  if (state.current.length < 1) return state;\r\n  let newTodos;\r\n  let newState = { ...state };\r\n  if (newState.current[0].completed === true) {\r\n    newTodos = newState.current.map((todo) => {\r\n      todo.completed = false;\r\n      return todo;\r\n    });\r\n  } else {\r\n    newTodos = newState.current.map((todo) => {\r\n      todo.completed = true;\r\n      return todo;\r\n    });\r\n  }\r\n  newState.current = newTodos;\r\n  return newState;\r\n};\r\n\r\nconst handleDeleteArhcivedTodos = (state) => {\r\n  if (state.archived.length < 1) return state;\r\n  let newState = { ...state };\r\n  newState.archived = [];\r\n  return newState;\r\n};\r\n\r\nexport const todosReducer = (state = { current: [], archived: [] }, action) => {\r\n  switch (action.type) {\r\n    case \"SET_CURRENT\":\r\n      return handleSetCurrent(state, action);\r\n    case \"SET_ARCHIVED\":\r\n      return handleSetArhived(state, action);\r\n    case \"TOGGLE_TODO\":\r\n      return handleToggleTodo(state, action);\r\n    case \"REFRESH_TODOS\":\r\n      return handleRefreshTodos(state);\r\n    case \"TOGGLE_EDIT_TODO\":\r\n      return handleToggleEditTodo(state, action);\r\n    case \"ADD_TODO\":\r\n      return handleAddTodo(state, action);\r\n    case \"MODIFY_TODO\":\r\n      return handleModifyTodo(state, action);\r\n    case \"ARCHIVE_COMPLETED\":\r\n      return handleArchiveCompleted(state);\r\n    case \"TOGGLE_ALL_COMPLETED\":\r\n      return handleToggleAllCompleted(state);\r\n    case \"DELETE_ARCHIVED_TODOS\":\r\n      return handleDeleteArhcivedTodos(state);\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { combineReducers } from \"redux\";\r\nimport { todosReducer } from \"./todosReducer\";\r\n\r\nconst allReducers = combineReducers({\r\n    todos: todosReducer\r\n});\r\n\r\nexport default allReducers;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { createStore } from \"redux\";\nimport allReducers from \"./reducers/allReducers\";\nimport { Provider as ProviderRedux } from \"react-redux\";\n\nconst store = createStore(\n  allReducers/*,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()*/\n);\n\nReactDOM.render(\n  <React.StrictMode>\n    <ProviderRedux store={store}>\n      <App />\n    </ProviderRedux>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}